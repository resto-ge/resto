{"version":3,"sources":["logo.svg","Home.js","SignUp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","clicks","Clock","props","state","time","Date","toLocaleString","this","intervalID","setInterval","tick","clearInterval","setState","className","React","Component","FunctionalCounter","useState","value","setValue","style","backgroundColor","color","height","onClick","oldValue","alert","Home","src","logo","alt","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,qNCIvCC,EAAS,EAEPC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,IAAIC,MAAOC,kBAHF,E,iFAME,IAAD,OAClBC,KAAKC,WAAaC,aAChB,kBAAM,EAAKC,SACX,O,6CAIFC,cAAcJ,KAAKC,c,6BAGnBD,KAAKK,SAAS,CACZR,MAAM,IAAIC,MAAOC,qB,+BAInB,OAAe,KAAXN,EAEF,uBAAGa,UAAU,aAAb,4FACsBN,KAAKJ,MAAMC,KADjC,KAIY,S,GA5BEU,IAAMC,WAgC1B,SAASC,IAAqB,IAAD,EACDF,IAAMG,SAAS,GADd,mBACpBC,EADoB,KACbC,EADa,KAE3B,OAAQ,6BACN,wJAA+BD,EAA/B,MACA,4BAAQE,MAAO,CAACC,gBAAgB,QAASC,MAAM,QAASC,OAAO,IAAKC,QAAS,WAC3EL,GAAS,SAAAM,GAAQ,OAAIA,EAAW,KAClB,IAAVP,EACJQ,MAAM,wJACe,KAAVR,IACXlB,EAAS,MALX,+CAqCW2B,MA1Bf,WACE,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKe,IAAKC,IAAMhB,UAAU,WAAWiB,IAAI,SACzC,+CAGA,uBACEjB,UAAU,WACVkB,KAAK,KACLC,IAAI,uBAHN,sBAOA,6BACA,kBAAChB,EAAD,MACA,kBAAC,EAAD,MACA,6BACA,6BACA,uBAAGe,KAAK,SAASlB,UAAU,YAA3B,2F,wBClE4BE,YCSrBkB,MAVf,WACE,OAEQ,yBAAKpB,UAAU,OACb,kBAAC,EAAD,QCEQqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b6fac7b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nvar clicks = 0;\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date().toLocaleString()\n    };\n  }\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.tick(),\n      500\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n  tick() {\n    this.setState({\n      time: new Date().toLocaleString()\n    });\n  }\n  render() {\n    if (clicks === 13) {\n    return (\n      <p className=\"App-clock\">\n        ამ დროსაც ყლე ხარ: {this.state.time}.\n      </p>\n    );\n    } else return null;\n  }\n}\n\nfunction FunctionalCounter() {\n  const [value, setValue] = React.useState(0);\n  return (<div>\n    <span>გაიგე რამდენად ყლე ხარ: {value}  </span>\n    <button style={{backgroundColor:'black', color:'white', height:60}} onClick={() => {\n      setValue(oldValue => oldValue + 1);\n      if (value === 6) {\n      alert('როდემდე აპირებ გაგრძელებას..');\n      } else if (value === 13) {\n      clicks = 13;\n      }\n    }}>დააჭირე</button>\n  </div>);\n};\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Welcome to Resto\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"/#\"\n          rel=\"noopener noreferrer\"\n        >\n          Resto.ge © 2019\n        </a>\n        <br />\n        <FunctionalCounter />\n        <Clock />\n        <br />\n        <br />\n        <a href=\"signup\" className=\"App-link\">დაყლეგისტრირდი</a>\n      </header>\n    </div>\n  );\n}\n\nexport default Home;","import React, { Component } from 'react';\n\nimport {\n     Col, Form,\n     Button,\n} from 'react-bootstrap';\n\nexport default class SignUp extends Component {\n     state = {\n     }\n\n     render() {\n          document.body.style.backgroundColor = \"black\";\n          document.body.style.color = \"white\";\n          return (\n               <div>\n                    <div id='signupContainer'>\n                         <center>\n                              <div style={{ width: 600, textAlign: 'left', padding: 10, marginTop: 10 }} className=\"block-example border border-primary rounded mb-0\">\n                                   <Form>\n                                        <Form.Group as={Form.Row} controlId=\"formHorizontalEmail\">\n                                             <Form.Label column sm={2}>\n                                                  ყლიმეილი\n                                        </Form.Label>\n                                             <Col sm={10}>\n                                                  <Form.Control type=\"email\" placeholder=\"ყლიმეილ@ჯიმეილ.რუ\" />\n                                             </Col>\n                                        </Form.Group>\n\n                                        <Form.Group as={Form.Row} controlId=\"formHorizontalPassword\">\n                                             <Form.Label column sm={2}>\n                                                  შიფრი\n                                        </Form.Label>\n                                             <Col sm={10}>\n                                                  <Form.Control type=\"password\" placeholder=\"ბოსტონის ფილიალის საცავის კოდი\" />\n                                             </Col>\n                                        </Form.Group>\n                                        <fieldset>\n                                             <Form.Group as={Form.Row}>\n                                                  <Form.Label as=\"legend\" column sm={2}>\n                                                       ყლე:\n                                             </Form.Label>\n                                                  <Col sm={10}>\n                                                       <Form.Check\n                                                            type=\"radio\"\n                                                            label=\"ვარ\"\n                                                            name=\"formHorizontalRadios\"\n                                                            id=\"formHorizontalRadios1\"\n                                                       />\n                                                       <Form.Check\n                                                            type=\"radio\"\n                                                            label=\"ხარ\"\n                                                            name=\"formHorizontalRadios\"\n                                                            id=\"formHorizontalRadios2\"\n                                                       />\n                                                       <Form.Check\n                                                            type=\"radio\"\n                                                            label=\"არ მიფიქრია\"\n                                                            name=\"formHorizontalRadios\"\n                                                            id=\"formHorizontalRadios3\"\n                                                       />\n                                                  </Col>\n                                             </Form.Group>\n                                        </fieldset>\n                                        <Form.Group as={Form.Row} controlId=\"formHorizontalCheck\">\n                                             <Col sm={{ span: 10, offset: 2 }}>\n                                                  <Form.Check label=\"არ დამიმახსოვრო\" />\n                                             </Col>\n                                        </Form.Group>\n\n                                        <Form.Group as={Form.Row}>\n                                             <Col sm={{ span: 10, offset: 2 }}>\n                                                  <Button type=\"submit\">დაყლეგისტრირება</Button>\n                                                  <Button href=\"/\" style={{ marginLeft: 20 }}>დაბრუნება</Button>\n                                             </Col>\n                                        </Form.Group>\n                                   </Form>\n                              </div>\n                         </center>\n                    </div>\n               </div>\n          )\n     }\n}","import React from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport SignUp from './SignUp';\n\nfunction App() {\n  return (\n\n          <div className=\"App\">\n            <Home />\n          </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}